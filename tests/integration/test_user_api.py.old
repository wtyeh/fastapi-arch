"""
User API integration test module.
"""
from fastapi.testclient import TestClient
from sqlmodel import Session, SQLModel, create_engine
from sqlmodel.pool import StaticPool

from app.db.postgres import get_session
from app.main import app
from app.models.user import UserCreate, UserRead


def get_test_db():
    """
    Get test database session.
    
    Yields:
        Session: Database session
    """
    engine = create_engine(
        "sqlite://",
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
    )
    SQLModel.metadata.create_all(engine)
    with Session(engine) as session:
        yield session


app.dependency_overrides[get_session] = get_test_db
client = TestClient(app)


def test_create_user():
    """
    Test create user.
    """
    user_data = {
        "email": "test@example.com",
        "full_name": "Test User",
        "password": "password123",
    }
    
    response = client.post("/api/v1/users/", json=user_data)
    
    assert response.status_code == 201
    
    data = response.json()
    assert data["email"] == "test@example.com"
    assert data["full_name"] == "Test User"
    assert "id" in data
    assert "password" not in data
    assert "hashed_password" not in data
    assert data["is_active"] is True
    assert data["is_superuser"] is False


def test_read_users():
    """
    Test read users.
    """
    user_data = {
        "email": "test2@example.com",
        "full_name": "Test User 2",
        "password": "password123",
    }
    
    client.post("/api/v1/users/", json=user_data)
    
    response = client.get("/api/v1/users/")
    
    assert response.status_code == 200
    
    data = response.json()
    assert isinstance(data, list)
    assert len(data) > 0


def test_read_user():
    """
    Test read user.
    """
    user_data = {
        "email": "test3@example.com",
        "full_name": "Test User 3",
        "password": "password123",
    }
    
    response = client.post("/api/v1/users/", json=user_data)
    user_id = response.json()["id"]
    
    response = client.get(f"/api/v1/users/{user_id}")
    
    assert response.status_code == 200
    
    data = response.json()
    assert data["id"] == user_id
    assert data["email"] == "test3@example.com"
    assert data["full_name"] == "Test User 3"


def test_update_user():
    """
    Test update user.
    """
    user_data = {
        "email": "test4@example.com",
        "full_name": "Test User 4",
        "password": "password123",
    }
    
    response = client.post("/api/v1/users/", json=user_data)
    user_id = response.json()["id"]
    
    update_data = {
        "full_name": "Updated User 4",
    }
    
    response = client.put(f"/api/v1/users/{user_id}", json=update_data)
    
    assert response.status_code == 200
    
    data = response.json()
    assert data["id"] == user_id
    assert data["email"] == "test4@example.com"
    assert data["full_name"] == "Updated User 4"


def test_delete_user():
    """
    Test delete user.
    """
    user_data = {
        "email": "test5@example.com",
        "full_name": "Test User 5",
        "password": "password123",
    }
    
    response = client.post("/api/v1/users/", json=user_data)
    user_id = response.json()["id"]
    
    response = client.delete(f"/api/v1/users/{user_id}")
    
    assert response.status_code == 200
    
    response = client.get(f"/api/v1/users/{user_id}")
    assert response.status_code == 404
